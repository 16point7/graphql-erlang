scalar ColorType
scalar Color

enum Mood {
     TRANQUIL
     DODGY
     AGGRESSIVE
}

enum Property {
     BEAST
     MECH
     DRAGON
     PIRATE
     MURLOC
     TOTEM
     DEMON
}

interface Node {
  id : ID!
}

type Error {
  message : String
}

type Stats {
  attack : Int!
  yell : String
  shellScripting : Int
}

type Monster implements Node {
  id : ID!
  name : String!
  color(colorType: ColorType = "rgb") : Color!
  hitpoints : Int!
  inventory : [Thing]
  hp : Int!
  mood : Mood
  plushFactor : Float!
  spikyness : Float
  stats(
    +description(text: "Return stats above this attack value")
    minAttack: Int = 0
   ) : [Stats]
  statsVariantOne : [Stats]!
  statsVariantTwo : [Stats!]
  statsVariantThree : [Stats!]!
  properties : [Property]

  errorListResolution : [Property]
}

type Room implements Node {
  id : ID!
  description : String!
  contents : [Thing]
}

type Item implements Node {
  id : ID!
  name : String!
  description : String!
  weight : String!
  weightSum : String!
  contents : [Thing]
}

union Thing = Item | Monster

# Inputs and Payloads

input StatsInput {
  attack : Int! = 7
  yell : String
  shellScripting : Int
}

input IntroduceMonsterInput {
  clientMutationId : String
  name : String!
  color : Color!
  hitpoints : Int = 15
  plushFactor : Float = 0.01
  mood : Mood = DODGY
  properties : [Property] = []
  stats : [StatsInput]
}

type IntroduceMonsterPayload {
  clientMutationId : String
  monster : Monster
}

input IntroduceRoomInput {
  clientMutationId : String
  description : String!
}

type IntroduceRoomPayload {
  clientMutationId : String
  room : Room
}

input SpawnMinionInput {
  clientMutationId : String
  monsterId : ID!
  roomId : ID!
}

type SpawnMinionPayload {
  clientMutationId : String
  room : Room
  monster : Monster
}

input IntroduceItemInput {
  clientMutationId : String
  name : String!
  description : String!
  weight : Float!
}

type IntroduceItemPayload {
  clientMutationId : String
  item : Item
}

# Roots

type MutationRoot {
  introduceRoom(input: IntroduceRoomInput!) : IntroduceRoomPayload
  introduceMonster(input: IntroduceMonsterInput!) : IntroduceMonsterPayload
  introduceItem(input: IntroduceItemInput!) : IntroduceItemPayload
  spawnMinion(input: SpawnMinionInput!) : SpawnMinionPayload
}

type QueryRoot {
  monster(id: ID!) : Monster
  monsters(ids: [ID!]) : [Monster]
  thing(id: ID!) : Thing
  room(id: ID!) : Room
  rooms(ids: [ID!]) : [Room!]
}

